#!/bin/bash

. /opt/cs50/lib/cli

output=$(cat)

# touch cs50.py && python -c "import cs50; cs50.get_int" && python -c "from cs50 import get_int"
regex="AttributeError: module 'cs50' has no attribute '.*'|ImportError: cannot import name '.*' from 'cs50'"
if [[ "$output" =~ $regex ]]; then
    if [[ -f cs50.py ]]; then
        echo "You have a file called \`cs50.py\` that is \"shadowing\" CS50's own. Best to rename that file with \`mv\`."
        exit
    fi
fi

# touch re.py && python -c "import re; re.search" && python -c "from re import search"
regex="AttributeError: module 're' has no attribute '.*'|ImportError: cannot import name '.*' from 're'"
if [[ "$output" =~ $regex ]]; then
    if [[ -f re.py ]]; then
        echo "You have a file called \`re.py\` that is \"shadowing\" Python's own. Best to rename that file with \`mv\`."
        exit
    fi
fi

# touch re.py && python -c "import string; string.digits" && python -c "from string import digits"
regex="AttributeError: module 'string' has no attribute '.*'|ImportError: cannot import name '.*' from 'string'"
if [[ "$output" =~ $regex ]]; then
    if [[ -f string.py ]]; then
        echo "You have a file called \`string.py\` that is \"shadowing\" Python's own. Best to rename that file with \`mv\`."
        exit
    fi
fi

# mkdir -p foo/bar && touch foo/bar/baz.py && python baz.py
regex="python: can't open file '(.*\.py)': \[Errno 2\] No such file or directory"
if [[ "$output" =~ $regex ]]; then

    # Relative path from $PWD
    path=$(realpath --relative-to=. "${BASH_REMATCH[1]}")

    # If command was `python baz.py` (i.e., without a dirname)
    if [[ -n "$path" && "$path" == $(basename "$path") ]]; then
        dir=$(_find -type f "$path")
        echo -n "There isn't a file called \`$path\` in your current directory."
        if [[ ! -z "$dir" ]]; then
            echo " Did you mean to \`cd $dir\` first?"
        else
            echo
        fi
        exit
    fi

    # If command was `python bar/baz.py` (i.e., with a dirname)
    if [[ -n "$path" && "$path" == $(basename "$path") ]]; then
        dir=$(_find -type f "$path")
        echo -n "There isn't a file called \`$path\` in your current directory."
        if [[ ! -z "$dir" ]]; then
            echo " Did you mean to \`cd $dir\` first?"
        else
            echo
        fi
        exit
    fi
fi

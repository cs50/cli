#!/bin/bash

output=$(cat)

# touch foo.py && foo.py
regex="bash: (.*\.py): command not found"
if [[ "$output" =~ $regex ]]; then

    # If file exists
    if [[ -f "${BASH_REMATCH[1]}" ]]; then
        echo "Did you mean to run \`python ${BASH_REMATCH[1]}\`?"
        exit
    fi
fi

# mkdir foo && bar
regex="bash: (.*): command not found"
if [[ "$output" =~ $regex ]]; then

    # If typo
    if [[ "${BASH_REMATCH[1]}" == "1s" ]]; then
        echo "Did you mean to run \`ls\` (which starts with a lowercase L)?"
        exit
    fi

    # If directory exists
    if [[ -d "${BASH_REMATCH[1]}" ]]; then
        echo "Did you mean to run \`cd ${BASH_REMATCH[1]}\`?"
        exit
    fi
fi

# mkdir foo && ./foo
regex="bash: \./([^:]*): Is a directory"
if [[ "$output" =~ $regex ]]; then
    echo "Cannot execute a directory. Did you mean to run \`cd ${BASH_REMATCH[1]}\`?"
    exit
fi

# touch foo && cd foo
regex="bash: cd: (.*): Not a directory"
if [[ "$output" =~ $regex ]]; then
    file="${BASH_REMATCH[1]}"
    echo "Looks like you're trying to change directories, but \`$file\` isn't a directory."
    exit
fi

# touch foo.c && ./foo.c
regex="bash: \./(([^:]*)\.c): Permission denied"
if [[ "$output" =~ $regex ]]; then

    # If file exists
    if [[ -f "${BASH_REMATCH[1]}" ]]; then
        echo "Did you mean to run \`make ${BASH_REMATCH[2]}\` and then \`./${BASH_REMATCH[2]}\`?"
        exit
    fi
fi

regex="bash: \./(.*\.py): Permission denied"
if [[ "$output" =~ $regex ]]; then

    # If file exists
    if [[ -f "${BASH_REMATCH[1]}" ]]; then
        echo "Did you mean to run \`python ${BASH_REMATCH[1]}\`?"
        exit
    fi
fi

# touch foo && /.foo
regex="bash: /\.([^:]*): No such file or directory"
if [[ "$output" =~ $regex ]]; then

    # If file exists
    if [[ -f "${BASH_REMATCH[1]}" ]]; then
        echo "Did you mean to run \`./${BASH_REMATCH[1]}\`?"
        exit
    fi
fi

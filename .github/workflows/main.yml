on: push

jobs:
  build-amd64:
    runs-on: ubuntu-latest-64-cores
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build for linux/amd64
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VCS_REF=${{ github.sha }}
            BUILDARCH=amd64
          load: true
          platforms: linux/amd64
          tags: cs50/cli:amd64
          cache-from: type=registry,ref=cs50/cli:amd64-buildcache
          cache-to: type=registry,ref=cs50/cli:amd64-buildcache,mode=max

      - name: Push linux/amd64 build to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          docker push cs50/cli:amd64

  build-arm64:
    needs: build-amd64
    runs-on: ubuntu-latest-64-cores-arm
    steps:
      - name: Install Docker
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt update
          sudo apt install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo usermod -aG docker $USER
          sudo apt install -y acl
          sudo setfacl --modify user:$USER:rw /var/run/docker.sock

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Python
        run: |
          sudo apt install -y python3

      - name: Build for linux/arm64
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VCS_REF=${{ github.sha }}
            BUILDARCH=arm64
          load: true
          platforms: linux/arm64
          tags: cs50/cli:arm64
          cache-from: type=registry,ref=cs50/cli:arm64-buildcache
          cache-to: type=registry,ref=cs50/cli:arm64-buildcache,mode=max

      - name: Push linux/arm64 build to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          docker push cs50/cli:arm64

      - name: Create multi-arch manifest and push to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          docker manifest create cs50/cli:latest \
          --amend cs50/cli:amd64 \
          --amend cs50/cli:arm64
          docker manifest push cs50/cli:latest

      - name: Re-deploy depdendents
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.DEPLOY50_PAT }}
          script: |
            const dependents = [
                'server'
            ];
            for (let dependent of dependents) {
                await github.rest.actions.createWorkflowDispatch({
                  owner: 'cs50',
                  repo: dependent,
                  workflow_id: 'main.yml',
                  ref: 'main'
                });
            }
